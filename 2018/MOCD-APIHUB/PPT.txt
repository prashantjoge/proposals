The Tenets of our digital transformation experience

Slide # 1
Our Digital Transformation Princliples
Principle #1
"Modern business isn’t (just) about adopting a mobile strategy or using the cloud to generate efficiency savings. Most crucially, it’s about embracing a shift in the nature of supply and demand."

Notes
Example <Insert Company Name - Ticket Master>
Decades ago, Ticket Master was an analog business: customer interactions occurred via physical locations or a phone number—a limited supply delivered through limited, often purpose-built channels. This changed when Ticketmaster moved online but only to a degree. Transactions were still channeled through a limited set of pipes, such as core websites, and offerings were still constrained, relying on customers to seek them out.

When the customer approached Verbat, we transformed their API offerings into their core business offering. It made ticket purchasing and event discovery, available via APIs. This provides a programming interface that empowers it's partners to combine these services with their own. Rather than shouldering the full burden of building channels and attracting customers to them, Ticketmaster can now benefit from demand generated by third parties and transactions fulfilled in channels (Social media, Movie outlets, magazine outlets, Malls etc.) it didn’t have to create.


Principle #2

"Digital transformation is bigger than IT investments or even platform strategies. Successful digital journeys require overhauling the organization’s operating model."


Information Technology is a business enabler, not a curator of technical infrastructure. 
< insert Graphic>
Notes: 
When companies don't make adjustments to their sales, marketing and product management approaches  its creates a schism. Closing the gaps requires that businesses not only use APIs but design and manage them as products for developers. API's are not merely meant to expose systems — it’s to create an interface that lets developers reliably leverage assets to create new apps and digital experiences. Managing APIs as products involves offering self-service features that enable developers to quickly access the resources they need, adopting operational models that support agile development.  



Slide #  2

From experience we have observed 10 core dimensions for digital transformations. (Aside: I thought that it would make sense if we are both on the same page.) We can be broadly classify this into three areas
<insert Graphic to the right>

Vision : measures whether your organization has the right mindset to achieve digital transformation, and whether leaders understand the scope and core concepts involved.
Alignment: gauges the business’s commitment to digital transformation and whether it has the resources and governance to support agile API product development.
Execution: assesses how effectively the business can build and scale available APIs.

<Insert Grapic on dimensions>

Notes:
Platform:  In 2016 magazine <x> Leveraged ints API platform. Verbat helped create a digital market place that alowed third parties to sell under its banner. By creating an API platform, it was able to drastically improve its e-commerce capabilities, catering to mobile as well market place customers without practically incurring any marginal cost.

API: APIs are not middleware that expose assets through system integration. APIs are strategic assets—to be designed and managed as products that empower developers. They encourage developer productivity by providing both programming flexibility and an intuitive, accessible interface for accessing core systems. Take the case of <Ready Weather>. It recognized that some developers would need up-to-the-minute weather information, which would generate billions of API calls, whereas others would prefer daily forecasts, which impose a much lower data overhead. The company customized multiple API packages to let developers purchase according to their needs.

Outside–In: Successful digital businesses adopt an outside-in perspective that focuses on how customers and partners experience the brand. Our most successful customers are typically also those most fanatical about exceptional customer experiences. Organizations that master this dimension use analytics to understand the needs of both customers and the developers translating APIs into experiences for those customers.

Ecosystem: Digital ecosystems enable companies to focus on their strengths while relying on developers, partners, and other ecosystem participants for the infrastructure and services that turn those strengths into fully-featured digital experiences, expand the reach of those strengths, generate more demand, and facilitate entry into adjacent businesses. MOCD has applications hosted on windows and Linux servers across multiple channels. Our soolution shall integrate myriad sources into a single user friendly ecosystem that can be descoverable by developers and can be used with ease.

Leadership: As convey's law's observe systems reflect communication patterns. If your organization is siloed, your systems will be too. These divisions can fragment the brand experience your company presents to end users and hinder your company’s ability to change.

Funding: API programs typically struggle when saddled with funding models, development cycles, and governance processes built for waterfall methods or other legacy approaches. Organizational processes that support agile digital product teams are mandatory.

Metrics: We embrace metrics rooted in API consumption patterns. Avoid measurements that are not connected to business results, such as the number of APIs produced. Focus on metrics that reflect API consumption and how APIs drive transactions; for example, which APIs produce the highest-value transactions per call, which APIs generate the highest partner and developer engagement, and which APIs are decreasing time-to-market for new products.

Software Development Lifecycle (SDLC): If you attempt to deploy an API-first approach using old governance and waterfall methods, you won’t achieve the speed, innovation, and cost reduction goals that motivated the transformation in the first place. Executing in the digital world means maintaining leverage amid ever-changing customer preferences.
Verbat builds APIs using modern, agile, iterative methods. Test-driven and behavior-driven design, as well as a focus on automation, are all parts of an API-first approach. Our SDLC is tightly coupled with how you fund and measure project success—in fact, it is an expression of how projects are funded and what is valued (project forecasting accuracy prioritized over customer experience, for example). Therefore, maturity in this dimension is predicated on proper alignment in leadership, metrics, and funding. (Please BS here. I got nothing more)

Talent: Developers are a key link in the digital value chain; they translate the raw materials of a company’s data and functions into apps and digital experiences that create value for the business. An organization’s ability to attract and develop strong technical talent is among its most important digital competencies. Verbat has a community of API evangelists to share and distribute best practices

Self-Service: If the developers you engage (internal or external) are not able to quickly consume your APIs, the program will fail to deliver impact. The gold standard for TTFHW, or “Time to First ‘Hello World,’” is five minutes.


Slide 3
Challenge
Pressure to modernize legacy apps into microservices-based apps
a> Interruptions to business continuity during the modernization process
b> Cyber threats and traffic spikes
c> Difficult to find services, reduced  consumption

Slide 2
Solution
Intercept every request and route to appropriate target
a> Consistent security policies
b> Discoverability via developer portal
c> monitoring performance and service usage


Slide 3

Verbats API Services Development Methodology
1. Design: Create API Proxies, API policies and protocol transformations Note: An API’s job is to make the developer who consumes the APIs as successful as possible. The success of an API program is determined by how well these API consumers adopt the APIs. Any API management solution needs to help API providers see from the developer’s perspective when designing and building APIs that are easy to use and follow best practices. That will ultimately maximize the productivity of the developers who build on the API.
Key capabilities of the Apigee Edge API management product in this area include:
• Security, which lets you protect APIs, messages, and backends with configurable policies such as OAuth, API key verification, XML/JSON threat protection, access control (IP whitelisting and blacklisting), and SAML assertions.
• Protocol transformation, which enables the transformation of enterprise data and services into usable, scalable, and secure APIs. Edge supports the transformation of existing backend services to APIs with more than 30 out-of-the-box policies that let API developers configure rather than code their solutions. Configurable policies include SOAP to REST, XML to JSON, JSON to XML, and XSL Transformation.
• Support for Java, JavaScript, Node.js, and Python, which extend the programmability of the API management solution for developers who prefer coding over configuration. Through the use of callout policies, code written using these standard languages executes as part of the request pipeline like any out-of-the-box policy.
• Versioning is supported at multiple levels. Backend service versions can be “hidden” behind the API facade. Versioning can be applied at the URI level, following best practices and internal corporate standards. Additionally, all artifacts (policies and configurations) are stored in XML and can be placed into versioning systems.
2. Secure: Security best practices & governance policies to protect from OWASP threats by implementing, 0Auth 2.0, SAML, 2-way TLS etc.
3. Publish: Documentation, Manage audience (Federate), reusable access controls
Notes: Developer and partner productivity depends on an efficient onboarding experience. A key capability of any API management solution is a developer portal enabling companies to provide everything that internal,
partner, and third-party developers need be effective and productive building on the APIs. A developer portal enables an API provider to deliver an enhanced developer and community experience that accelerates
API adoption, simplifies learning, and increases the business value of APIs. The best developer portals provide a complete, selfservice developer experience. They enable developers to register their applications, select the APIs and the service levels they need, get secure access, monitor their API usage, and even monetize and participate in revenue sharing with the API provider. The ability to provide documentation and a developer feedback mechanism is an important consideration when publishing API products. Developer portals with social publishing features are increasingly being used for communicating static content, such as interactive API documentation and terms-of-use, as well as dynamic community-contributed content, such as blogs and forums, as well as customer support features. 4. Analyze: understand traffic spikes, realtime insights on revenue metrics
5. Monitor (Traffic management): Ensure availability, seamless experience for developers, customers and partners
Notes: Traffic management capabilities include:
• Caching to improve API and app performance by storing data from backend resources in a cache, from where they can be retrieved quickly. Intelligent traffic routing and caching to give users the nearest point of
presence over wide geographical areas can be very important, especially for latency-sensitive apps.
• Quotas and rate limits to limit the number of connections apps can make via the API to the backend.
• Spike arrest capabilities to protect backend systems against severe traffic spikes and denial-ofservice attacks.
6. Monetize: Scale API's, Out of the box monetization
Notes: Monetization, a feature of Edge Developer Services, provides the following capabilities. 
• Rate plans: Using monetization, you can create a variety of rate plans that charge developers (or pay them through revenue sharing) for the use of your APIs. You can create pre-paid, post-paid, fixed-fee,
variable rate, and “freemium” plans, as well as plans tailored to specific developers, plans covering groups of developers, and revenue sharing.
• Reporting and billing: API providers can get reports on traffic to the APIs for which developers purchased a rate plan. API providers can create billing documents (which include applicable taxes) for the use of their API packages and publish those documents to developers. Monetization also integrates with payment providers, such as WorldPay, allowing developers to pre-pay for their API use.
• Setting limits: An API provider can set limits to help control and monitor the performance of APIs, and can set up automatic notifications for when limits are approached or reached.
• Monetization-related content: The Edge developer portal includes content that an API provider publishes or viewing by a developer, such as a catalog of available API packages and rate plans for each package. API providers take advantage of the monetization features in the developer portal or integrate monetization features into their own developer portal.

Slide 4 Dashboards

1. Developer Portal: Publish APIs, Explore, test, GEnerate API Keys Notes: to attract and engage application developers, enabling them to discover, explore, purchase (or profit from), and test APIs and register to access and use the APIs
2. API Gateway Notes: to secure and mediate the traffic between clients and backends, and between a company’s APIs and the developers, customers, partners, and employees who use the APIs
3. API Life Cycle management Notes: to manage the process of designing, developing, publishing, deploying, and versioning APIs
4. Analytics Engine Notes: That provides insights for business owners, operational administrators, and application developers enabling them to manage
5. API Monetization  Notes: to enable API providers to package, price, and publish their APIs so that partners and developers can purchase access or take part in revenue sharing
2. Manage Microservices: Manage how microservices interact with each other as well as external partners

Slide 5 API Hub Overall solution description
https://cloud.google.com/images/apigee/api-management/api-management-platform.png
(Customize to API HUB)

Slide 6 Hybrid API Management
Management Plane
Runtime Plane


Notes:
You can think of Apigee hybrid as traditional Apigee Edge split into two distinct parts, a management plane maintained by Apigee in the Cloud, and a runtime plane that you install and maintain on a network that you control:

Apigee-run management plane: A set of services hosted and maintained by Apigee in the Cloud that provide Apigee Edge UI, management API, and API analytics features for hybrid.
Customer-managed runtime plane: A set of containerized runtime services that you set up and maintain in your own Kubernetes cluster. All API traffic passes through and is processed within the runtime plane.

Manage the containerized runtime on your Kubernetes cluster for greater agility with staged rollouts, auto-scaling, and other operational benefits of containers.

About the management plane
The management plane includes the Edge UI, management API server, and analytics platform. Basically, you interact with the management plane in exactly the same way you do when you use Apigee Edge Cloud or Edge for Private Cloud. You use the Edge UI or management APIs to create and deploy API proxies, configure policies, create API products, and create developer apps.

About the runtime plane
The runtime plane runs in a Kubenernetes cluster that you own and maintain. As shown in the following diagram, the runtime plane includes several main services, which run in separate pods in your cluster. The services are described in more detail in the following sections.

Message Processor
The hybrid Message Processor (MP) brings the entire functionality of Apigee Edge related to API request processing and policy execution to the runtime plane. The MP loads from local storage all of the deployed proxies, resources, target servers, certs, and keystores for target TLS, caches, KVMs, flow hooks, and so on for a specified organization's environment. You must configure an Ingress controller to expose the MP to requests coming from outside the cluster.

Synchronizer
The Synchronizer's primary job is to fetch configuration data about an API environment from the management plane to the runtime plane. The runtime plane needs this environment-specific configuration data to do its work. This downloaded data is also called the contract.

The Synchronizer periodically polls the Management Server for changes and downloads a new configuration whenever changes are detected. The configuration data is retrieved and stored locally as a JSON file in a location where the Message Processors can access it.

The downloaded configuration data allows the runtime plane to function independently from the management plane. With a config, MPs on the runtime plane can bootstrap and run using the locally stored data as their configuration. If the connection between the management and runtime plane goes down, services on the runtime plane continue to function.

The configuration data downloaded by the Synchronizer includes:

Environment information, including the environment name, the organization name, and feature flags.
Shared API resources, including the resource scope, resource names, locations, and properties.
Target server definitions
TLS settings, including the location of keys and certificates
Environment caches
Key value map names (the runtime is responsible for initializing and populating KVMs).
Proxy bundles and shared flow deployments, including the name, revision, type and location.
Flow hooks
API products
Data masks
Cassandra datastore
Cassandra is the runtime datastore used to provide Apigee core persistence services (CPS) for the runtime plane.

You deploy the Cassandra database in Kubernetes in a StatefulSet node pool, as Cassandra is a distributed data system requiring state to be managed on the runtime plane. Locating these entities close to the runtime processing services helps support requirements for security and high scalability.

The Cassandra database stores information about the following entities:

Key management system (KMS) data, including companies, developers, developer apps, API products, and API keys
Key value map (KVM) data
Response cache data
OAuth data, including access tokens, refresh tokens, and authorization codes
Quota data, including buckets and counters
Management API (MART)
The Management API for Runtime data (MART) interacts with the local Cassandra datastore. The public Apigee Edge management APIs use MART APIs to access and manage data entities on the runtime plane, such as KMS (API keys and OAuth tokens), quotas, and API products.

Apigee Edge management API calls to access and manage these entities are sent to your local MART server from the management plane. For example, if you create a new API product using the Edge management API, the management plane calls MART APIs to update the runtime plane.


 